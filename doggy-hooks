#!/bin/bash

ENVIRONMENT_NAME=$(doggy -- sinfo --unique-environments --local)

MLRESCORE_PLUGIN_NAME="mlrescore-v2"
REQUIRED_ES_VERSION="7.9.0"
PLUGIN_FILE_LOCATION="/doggy/ml-grcp-rescoring-esplugin/current/mlrescore-v2.zip"

set -eu

err=0

function completeStopOfElasticsearch() {
    set -eu
    echo "To install the plugin we must take down the elasticsearch service, then run a command"
    echo "to pull and install the plugin."
    echo ""

    echo "Disabling cluster allocation."
    disable_cluster_allocation_result=$(curl --silent -X PUT "localhost:9200/_cluster/settings" \
        -H 'Content-Type: application/json' \
        -d '{"transient": {"cluster.routing.allocation.enable": "primaries"}}'\
    )
    echo "checking if cluster allocation disable was successful"
    echo $disable_cluster_allocation_result
    if [[ -z "$disable_cluster_allocation_result" ]]; then
        echo "Unexpected failed to get results from cluster allocation change! Unknown reason" 1>&2
        echo ""
        exit 1
    fi
    echo "${disable_cluster_allocation_result}" | jq ".acknowledged" | grep -i "true"
    echo "finished disabling the cluster successfully"
    echo ""

    echo "Next we are going to manually run a flushed sync against the server"
    echo "this is useful to prepare the cluster for a planned restart."
    echo ""
    echo "A flushed sync will allow us to restart the server without losing state"
    echo "in the indices that hasn't been processed yet"
    echo ""
    echo "beginning curl 'localhost:9200' /_flush/synced"
    flush_result=$(curl --silent -X POST "localhost:9200/_flush/synced")
    echo "Testing to see if flush succeeded"
    echo $flush_result
    echo "finished flushed!"
    echo ""
    echo "Stopping elasticsearch server"
    sudo systemctl stop elasticsearch
    echo "successfully stopped elasticsearch server"
    echo ""
}

function completeRestartOfElasticsearch() {
    set -eu
    echo "start elasticsearch"
    sudo systemctl start elasticsearch
    echo "successfully started elasticsearch"
    echo ""

    counter=0
    nodes_found=0
    while [[ $nodes_found -lt 3 ]]; do
        echo "checking for nodes found in cluster"
        nodes_response=$(curl --silent --fail 'localhost:9200/_cat/nodes?format=json' || echo '' )
        echo "nodes response:"
        echo $nodes_response
        if [[ -z "$nodes_response" ]]; then
            echo "Failed to get nodes from es server!"
        else
            nodes_found=$(echo $nodes_response | jq 'length')
            echo "found nodes=$nodes_found"
        fi

        if [[ $nodes_found -lt 3 ]]; then
            echo "cluster not joined yet!"
            echo "sleeping for a bit"
            sleep 60
            let "counter+=1"
            echo ""

            if [[ $counter -gt 10 ]]; then
                echo "exceeded maximum attempts to try to join the cluster!" 1>&2
                echo "something bad happened!" 1>&2
                echo ""
                exit 1
            fi
        else
            echo "found enough nodes to suggest cluster has been joined"
            echo ""
        fi
    done
    echo "cluster successfully joined"
    echo ""


    echo ""
    echo "Now that we have a valid cluster, we need to re-enable cluster allocation"
    curl --silent --fail -X PUT "localhost:9200/_cluster/settings" \
        -H 'Content-Type: application/json' \
        -d'{"transient":{ "cluster.routing.allocation.enable": null}}' \
        | jq .
    echo "cluster allocation re-enabled!"
    echo ""

    echo ""
    echo "beginning wait fo ES cluster to go green before finishing"
    counter=0
    is_healthy=""
    while [[ -z "$is_healthy" ]]; do 
        health_response=$(curl --silent "localhost:9200/_cluster/health?local=true&wait_for_status=green&timeout=60s")
        echo $health_response | jq .
        is_healthy=$(echo $health_response | jq ".timed_out")
        echo "cluster is unhealthy = ${is_healthy}"
        if [[ -z "$is_healthy" ]]; then
            echo ""
            echo "unhealthy cluster found!"
            echo "sleeping for a few seconds before trying again"
            sleep 5
            let "counter+=1"
            if [[ $counter -gt 10 ]]; then
                echo "counter exceeded 50 attempts!"
                echo "something went wrong in the cluster, and it never came up!"
                echo ""
                echo "please investigate this failure!"
                echo ""
                exit 1
            fi
        else
            echo "healthy cluster found! progressing!"
        fi
    done
}

function emergencyRestartOfElasticsearch() {
    set -eu
    echo "emegerncy trap triggered!" 1>&2
    echo "" 1>&2
    echo "An unexpected error has occurred! This has caused the emergency" 1>&2
    echo "return of service for elasticsearch!" 1>&2
    echo "" 1>&2
    echo "This should only happen under unexpeted circumstances" 1>&2
    echo "" 1>&2
    completeRestartOfElasticsearch
    exit 1
}


case "$1" in
    restart | graceful-restart)
        echo "Starting restart/install process for mlrescore-v2 plugin!"
        echo ""

        echo "First we need to determine that this server is running elasticsearch on localhost!"
        curl --silent --fail "localhost:9200" | grep "${REQUIRED_ES_VERSION}"
        echo "found required elasticsearch, with required es version = ${REQUIRED_ES_VERSION}"
        echo ""
        echo "retrieving plugin list"
        plugins_list_output=$(sudo /usr/share/elasticsearch/bin/elasticsearch-plugin list)
        echo -e $plugins_list_output
        echo ""

        # check if plugin is installed
        echo "determining if the current plugin is installed, and needs to be removed"
        for plugin in $(echo $plugins_list_output); do
            echo "found plugin=$plugin"
            if [[ "$plugin" = "$MLRESCORE_PLUGIN_NAME" ]]; then
                echo "located existing plugin $plugin"
                echo ""
                echo "uninstall plugin from elasticsearch!"
                sudo /usr/share/elasticsearch/bin/elasticsearch-plugin remove $plugin
                echo "finished uninstalling elasticserach plugin ${plugin}"
            fi
        done
        echo ""

        echo "ensuring that plugin is available to install!"
        if [[ ! -f "${PLUGIN_FILE_LOCATION}" ]]; then
            echo "plugin missing from location=${PLUGIN_FILE_LOCATION}"
            echo ""
            echo "printing out directory for debugging purposes"
            echo "directory=$(dirname "${PLUGIN_FILE_LOCATION}")"
            ls -al $(dirname "${PLUGIN_FILE_LOCATION}")
            echo ""
            echo "failed to install plugin! No plugin found at the expected location!!"
            echo "bailing!!"
            echo ""
            exit 1
        fi
        echo "plugin available at ${PLUGIN_FILE_LOCATION}"
        echo ""

        trap "emergencyRestartOfElasticsearch" ERR
        completeStopOfElasticsearch
        echo "Install plugin mlrescore-v2 from ${PLUGIN_FILE_LOCATION}"
        yes | \
            sudo /usr/share/elasticsearch/bin/elasticsearch-plugin \
                install \
                "file://${PLUGIN_FILE_LOCATION}"
        echo "successfully installed plugin!"
        echo ""
        completeRestartOfElasticsearch
        echo ""
        echo "List existing plugins after install"
        plugins_list=$(sudo /usr/share/elasticsearch/bin/elasticsearch-plugin list)
        echo $plugins_list
        echo "confirming that the plugin has been installed"
        echo $plugins_list | grep "${MLRESCORE_PLUGIN_NAME}"
        echo ""
        ;;
    status)
        #Elasticsearch Status:
        sudo systemctl status elasticsearch
        sudo /usr/share/elasticsearch/bin/elasticsearch-plugin list

        # You don't need sudo for this command, removed sudo
        curl --silent --fail -XGET localhost:9200 | jq .
        ;;

    self-test)
        exit 0
        ;;
    *)
        echo "Usage: "$0" {start|stop|restart|graceful-restart|status|self-test}"
        exit 1
esac

exit $?
